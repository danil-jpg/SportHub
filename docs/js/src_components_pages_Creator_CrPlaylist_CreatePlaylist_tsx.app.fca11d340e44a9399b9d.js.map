{"version":3,"file":"js/src_components_pages_Creator_CrPlaylist_CreatePlaylist_tsx.app.fca11d340e44a9399b9d.js","mappings":"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","sources":["webpack://sporthub/./src/components/pages/Creator/CrPlaylist/CreatePlaylist.tsx"],"sourcesContent":["import React, { FC, ReactNode, useEffect, useState } from 'react';\r\nimport Button from '../../../ui/Button/Button';\r\nimport IconRenderer from '../../../ui/IconRenderer/IconRenderer';\r\nimport './CreatePlaylist.scss';\r\nimport InputContainer from '../../../ui/Forms/InputContainer/InputContainer';\r\nimport SelectContainer from '../../../ui/Forms/SelectContainer/SelectContainer';\r\nimport Input from '../../../ui/Forms/Input/Input';\r\nimport { useAppSelector } from '../../../hooks/redux';\r\nimport Video from '../Video/Video';\r\nimport getDate from '../../../utils/getDate';\r\nimport { v1 } from 'uuid';\r\nimport TextareaContainer from '../../../ui/Forms/TextareaContainer/TextareaContainer';\r\nimport swal from 'sweetalert';\r\nimport { updateDoc, getDoc } from 'firebase/firestore';\r\nimport { DB } from '../../../../config/firebase-config';\r\nimport { doc } from 'firebase/firestore';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst CreatePlaylist: FC = () => {\r\n    const [burgerMenu, setBurgerMenu] = useState<boolean>(false);\r\n    const [searchInput, setSearchInput] = useState('');\r\n\r\n    const [selectState, setSelectState] = useState('');\r\n    const [titleInput, setTitleInput] = useState<string>('');\r\n    const [textAreaInput, setTextAreaInput] = useState<string>('');\r\n\r\n    const [saveBtnState, setSaveBtnState] = useState<boolean>(false);\r\n\r\n    const selector = useAppSelector((state) => state.regSlice.regData);\r\n    const videosIds = useAppSelector((state) => state.regSlice.regData.videosIds);\r\n\r\n    const [videoData, setVideoData]: any[] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (videosIds && videosIds?.length > 0) {\r\n            videosIds.map(async (el) => {\r\n                const docRef = await doc(DB, 'videos', el);\r\n                const getVideo = await getDoc(docRef);\r\n                if (getVideo.data()) {\r\n                    setVideoData((prev: any) => [...prev, getVideo.data()]);\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const [selectedArrState, setSelectedArrState] = useState<[boolean[], string[] | any]>([Array(videoData?.length).fill(false), Array(videoData?.length).fill({})]);\r\n\r\n    const countNumberOfVideos = (): number => {\r\n        let num = 0;\r\n        for (let i = 0; i < selectedArrState[0].length; i++) {\r\n            if (selectedArrState[0][i]) {\r\n                num++;\r\n            }\r\n        }\r\n        return num;\r\n    };\r\n\r\n    const numOfVideos = countNumberOfVideos();\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const filterVideosArrFunc = (): ReactNode[] | undefined => {\r\n        const res = videoData\r\n            .filter((el: any) => el.title.toUpperCase().includes(searchInput.toUpperCase()))\r\n            .map((el: any, index: any) => {\r\n                return (\r\n                    <div\r\n                        key={v1()}\r\n                        onClick={() => {\r\n                            setSelectedArrState((prev) => {\r\n                                const res = [...prev[0]];\r\n                                res[index] = !res[index];\r\n                                //\r\n                                const vidoesArr = [...prev[1]];\r\n                                if (res[index]) {\r\n                                    vidoesArr[index] = el;\r\n                                } else {\r\n                                    vidoesArr[index] = [];\r\n                                }\r\n                                return [res, vidoesArr];\r\n                            });\r\n                        }}\r\n                    >\r\n                        {/*  */}\r\n                        <Video\r\n                            className={`${selectedArrState[0][index] ? 'video-active' : ''} video-cr-playlist`}\r\n                            previewUrl={el.previewUrl}\r\n                            title={el.title}\r\n                            isClickAble={false}\r\n                            date={getDate(el.date)}\r\n                        ></Video>\r\n                    </div>\r\n                );\r\n            });\r\n\r\n        return res;\r\n    };\r\n\r\n    const checkIfVideoHadChoosen = (): ReactNode | '' => {\r\n        let status = false;\r\n        for (let i = 0; i < selectedArrState[0].length; i++) {\r\n            if (selectedArrState[0][i] === true) {\r\n                status = true;\r\n                break;\r\n            }\r\n        }\r\n        return status ? (\r\n            <>\r\n                <p className='cr-playlist__selected'>Selected</p>{' '}\r\n                <ul className='cr-playlist__chosen-ul'>\r\n                    {selectedArrState[1].map((el: any, index: any) =>\r\n                        el.title ? (\r\n                            <li key={v1()} className='cr-playlist__chosen-li'>\r\n                                {el.title}\r\n                                <IconRenderer\r\n                                    id='small-cross'\r\n                                    onClick={() =>\r\n                                        setSelectedArrState((prev) => {\r\n                                            const res = [...prev[0]];\r\n                                            res[index] = !res[index];\r\n                                            //\r\n                                            const vidoesArr = [...prev[1]];\r\n                                            if (res[index]) {\r\n                                                vidoesArr[index] = el;\r\n                                            } else {\r\n                                                vidoesArr[index] = [];\r\n                                            }\r\n                                            return [res, vidoesArr];\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </li>\r\n                        ) : (\r\n                            ''\r\n                        ),\r\n                    )}\r\n                </ul>\r\n            </>\r\n        ) : (\r\n            ''\r\n        );\r\n    };\r\n\r\n    const onSaveClick = async () => {\r\n        if (selectState && selectState !== 'Select category' && titleInput && textAreaInput && countNumberOfVideos() > 1) {\r\n            const oldData = await getDoc(doc(DB, 'users', selector.email)).then((res) => res.data()?.playlists);\r\n\r\n            if (oldData) {\r\n                await updateDoc(doc(DB, 'users', selector.email), {\r\n                    playlists: [\r\n                        ...oldData,\r\n                        {\r\n                            title: titleInput,\r\n                            description: textAreaInput,\r\n                            type: selectState,\r\n                            videos: selectedArrState[0]\r\n                                .map((el, index) => {\r\n                                    if (el === true) {\r\n                                        return videosIds ? videosIds[index] : '';\r\n                                    }\r\n                                })\r\n                                .filter((el) => {\r\n                                    return el !== undefined;\r\n                                }),\r\n                        },\r\n                    ],\r\n                })\r\n                    .then(() => swal('Successfully added'))\r\n                    .then(() => navigate('../home-cr-playlist'));\r\n            } else {\r\n                await updateDoc(doc(DB, 'users', selector.email), {\r\n                    playlists: [\r\n                        {\r\n                            title: titleInput,\r\n                            description: textAreaInput,\r\n                            type: selectState,\r\n                            videos: selectedArrState[0]\r\n                                .map((el, index) => {\r\n                                    if (el === true) {\r\n                                        return videosIds ? videosIds[index] : '';\r\n                                    }\r\n                                })\r\n                                .filter((el) => {\r\n                                    return el !== undefined;\r\n                                }),\r\n                        },\r\n                    ],\r\n                })\r\n                    .then(() => swal('Successfully added'))\r\n                    .then(() => navigate('../home-cr-playlist'));\r\n            }\r\n        } else {\r\n            swal('Fill out all fields and select at least two video');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSelectedArrState([Array(videoData?.length).fill(false), Array(videoData?.length).fill({})]);\r\n    }, [videoData]);\r\n\r\n    useEffect(() => {\r\n        if (selectState && selectState !== 'Select category' && titleInput && textAreaInput && numOfVideos > 1) {\r\n            setSaveBtnState(true);\r\n        } else {\r\n            setSaveBtnState(false);\r\n        }\r\n    }, [selectState, titleInput, textAreaInput, numOfVideos]);\r\n\r\n    return (\r\n        <div className='cr-playlist'>\r\n            <div className='cr-playlist__top'>\r\n                <p className='cr-playlist__title'>Create new playlist</p>\r\n                <div className='cr-playlist__top-right'>\r\n                    <Button className={`${saveBtnState ? 'active' : ''} cr-playlist__top_btn`} onClickHandler={() => onSaveClick()}>\r\n                        Save\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className='cr-playlist__center'>\r\n                <div>\r\n                    <InputContainer\r\n                        text='Playlist name'\r\n                        placeholder='Enter playlist name'\r\n                        value={titleInput}\r\n                        onChangeHandler={(e) => setTitleInput(e.target.value)}\r\n                    ></InputContainer>\r\n                    <TextareaContainer\r\n                        value={textAreaInput}\r\n                        onChangeHandler={(e) => setTextAreaInput(e.target.value)}\r\n                        text='Description'\r\n                        placeholder='Description'\r\n                    ></TextareaContainer>\r\n                    <SelectContainer setValue={setSelectState} value={selectState} title='Category' placeholder='Select category' arr={['Mind', 'Body', 'Soul']}></SelectContainer>\r\n                    {checkIfVideoHadChoosen()}\r\n\r\n                    <Button className='cr-playlist__center_select-videos' onClickHandler={() => setBurgerMenu(true)}>\r\n                        Select video\r\n                    </Button>\r\n                </div>\r\n                <div className={`cr-playlist__center__right  ${burgerMenu ? 'active' : ''} `}>\r\n                    <div className='cr-playlist__center__right_selected'>\r\n                        <p className='cr-playlist_selected-text'>\r\n                            Selected:\r\n                            {countNumberOfVideos()}\r\n                        </p>\r\n                        <IconRenderer id='cross' onClick={() => setBurgerMenu(false)} />\r\n                    </div>\r\n                    <Input placeholder='Search' value={searchInput} onChangeHandler={(e) => setSearchInput(e.target.value)} />\r\n\r\n                    {filterVideosArrFunc()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CreatePlaylist;\r\n"],"names":["React","useEffect","useState","Button","IconRenderer","InputContainer","SelectContainer","Input","useAppSelector","Video","getDate","v1","TextareaContainer","swal","updateDoc","getDoc","DB","doc","useNavigate","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","CreatePlaylist","_useState","_useState2","_slicedToArray","burgerMenu","setBurgerMenu","_useState3","_useState4","searchInput","setSearchInput","_useState5","_useState6","selectState","setSelectState","_useState7","_useState8","titleInput","setTitleInput","_useState9","_useState10","textAreaInput","setTextAreaInput","_useState11","_useState12","saveBtnState","setSaveBtnState","selector","state","regSlice","regData","videosIds","_useState13","_useState14","videoData","setVideoData","length","map","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","el","docRef","getVideo","wrap","_callee$","_context","prev","next","sent","data","concat","_toConsumableArray","stop","_x","apply","arguments","_useState15","Array","fill","_useState16","selectedArrState","setSelectedArrState","countNumberOfVideos","num","i","numOfVideos","navigate","filterVideosArrFunc","res","filter","title","toUpperCase","includes","index","onClick","vidoesArr","children","className","previewUrl","isClickAble","date","checkIfVideoHadChoosen","status","id","onSaveClick","_ref2","_callee2","oldData","_callee2$","_context2","email","then","_res$data","playlists","description","type","videos","undefined","onClickHandler","text","placeholder","value","onChangeHandler","e","target","setValue","arr"],"sourceRoot":""}